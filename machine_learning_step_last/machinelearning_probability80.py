import os
import sys
import csv
import commands
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from numpy import genfromtxt
import pandas as pd
import numpy as np

dic={}

with open('/home/nitesh/Downloads/Archive/out1.csv') as file_group_map:
   reader=csv.reader(file_group_map)
   data=list(reader)
   for d in data:
   	s=''
   	li=[]
   	for i in range(len(d)):
   		if i!=0:
   			if i!=1:
   				#s=s+d[i]
   				li.append(str(d[i]))
   				dic[d[0]]=li



   			
with open('/home/nitesh/Downloads/Archive/TEST_DATA/test_files_name.txt') as f1:
 lines=f1.readlines()

lines = [x.strip() for x in lines] 


print"filename,CALENDER_PB,CALENDER_PM,CALENDER_CLASS,MICROPHONE_PB,MICROPHONE_PM,MICROPHONE_CLASS,CAMERA_PB,CAMERA_PM,CAMERA_CLASS,OTHERS_PB,OTHERS_PM,OTHERS_CLASS,CONTACTS_PB,CONTACTS_PM,CONTACTS_CLASS,LOCATION_PB,LOCATION_PM,LOCATION_CLASS,SMS_PB,SMS_PM,SMS_CLASS,STORAGE_PB,STORAGE_PM,STORAGE_CLASS,PHONE_PB,PHONE_PM,PHONE_CLASS,TOTAL_SCORE_B,TOTAL_SCORE_M,FINAL_CLASS"

c=1
for line in lines:
  CONTACTS_pred="--"
  CONTACTS_prob="--,--"
  CALENDER_pred="--"
  CALENDER_prob="--,--"
  CAMERA_pred="--"
  CAMERA_prob="--,--"
  LOCATION_pred="--"
  LOCATION_prob="--,--"
  OTHERS_pred="--"
  OTHERS_prob="--,--"
  SMS_pred="--"
  SMS_prob="--,--"
  STORAGE_pred="--"
  STORAGE_prob="--,--"
  PHONE_pred="--"
  PHONE_prob="--,--"
  MICROPHONE_pred="--"
  MICROPHONE_prob="--,--"
  Final_class=""
  c=c+1
  sum_m=0
  sum_b=0
  #print line
  for di in dic:
  	if line == di:
  		for group in dic[di]:
  			if group=="CALENDER":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/CALENDER/CALENDER_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/CALENDER/CALENDER_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 CALENDER_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					     sum_b+=float(d1)
                                             CALENDER_prob=str(d1)
                                            else:
					     sum_m+=float(d1)
					     CALENDER_prob =CALENDER_prob+","+ str(d1) 
                                            i=i+1


               			#print "hello CALENDER"

            		if group=="CAMERA":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/CAMERA/CAMERA_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/CAMERA/CAMERA_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 CAMERA_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					      sum_b+=float(d1)
                                              CAMERA_prob=str(d1)
                                            else: 
					      sum_m+=float(d1)
					      CAMERA_prob =CAMERA_prob+","+ str(d1)
                                            i=i+1 
					#print y_pred
  				#print "hello CAMERA"
  			
  			if group=="LOCATION":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/LOCATION/LOCATION_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/LOCATION/LOCATION_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 LOCATION_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					     sum_b+=float(d1)
                                             LOCATION_prob=str(d1)
                                            else:
					     sum_m+=float(d1)
					     LOCATION_prob =LOCATION_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello LOCATION"
  			
  			if group=="OTHERS":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/OTHERS/OTHERS_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/OTHERS/OTHERS_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					for c1 in model.predict(X1):
					 OTHERS_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
 					   if i==0:
					       sum_b+=float(d1)
					       OTHERS_prob=str(d1)
					   else:
					       sum_m+=float(d1)
					       OTHERS_prob =OTHERS_prob+","+ str(d1) 
					   i=i+1
					#print y_pred
  				#print "hello OTHERS"
  			
  			if group=="SMS":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/SMS/SMS_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/SMS/SMS_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 SMS_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					      sum_b+=float(d1)
                                              SMS_prob=str(d1)
                                            else:
					      sum_m+=float(d1)
					      SMS_prob =SMS_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello SMS"
  			
  			if group=="STORAGE":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/STORAGE/STORAGE_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/STORAGE/STORAGE_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 STORAGE_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
					    if i==0:
					       sum_b+=float(d1)
                                               STORAGE_prob=str(d1)
                                            else:
					       sum_m+=float(d1)
					       STORAGE_prob =STORAGE_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello STORAGE"
  			
  			if group=="PHONE":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/PHONE/PHONE_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/PHONE/PHONE_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 PHONE_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					      sum_b+=float(d1)
                                              PHONE_prob=str(d1)
                                            else: 
					      sum_m+=float(d1)
					      PHONE_prob =PHONE_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello PHONE"
  			
  			if group=="MICROPHONE":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/MICROPHONE/MICROPHONE_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/MICROPHONE/MICROPHONE_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					
					for c1 in model.predict(X1):
					 MICROPHONE_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					       sum_b+=float(d1)
                                               MICROPHONE_prob=str(d1)
                                            else:
					       sum_m+=float(d1)
					       MICROPHONE_prob =MICROPHONE_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello MICROPHONE"
  			
  			if group=="CONTACTS":
  				with open("/home/nitesh/Downloads/Archive/TEST_DATA/CONTACTS/CONTACTS_test_80.csv") as test_files_name:
  					reader=csv.reader(test_files_name)
  					data=list(reader)
  					#row =reader.next()
  					#print data[c-1]
  					test=data[c-1]
  					#print test
					balance_data = pd.read_csv("/home/nitesh/Downloads/Archive/TRAIN_DATA/CONTACTS/CONTACTS_dom_80.csv",sep= ',', header= None)
					#print "Dataset Lenght:: ", len(balance_data)
					#print "Dataset Shape:: ", balance_data.shape
					#print "Dataset:: "
					X = balance_data.values[1:, 0:80]
					Y = balance_data.values[1:,80]
					model = XGBClassifier()
					model.fit(X,Y)
					t=[test]
					#print t
					test1=np.array(t)
					#print test1
					#print test1.shape	
					X1 = test1[:, 0:80]
					Y1 = test1[:,80]
					for c1 in model.predict(X1):
					 CONTACTS_pred = c1
					#print y_pred
                                        for d in model.predict_proba(X1):
                                          i=0
					  for d1 in d:
                                            if i==0:
					       sum_b+=float(d1)
                                               CONTACTS_prob=str(d1)
                                            else:
					       sum_m+=float(d1)
					       CONTACTS_prob =CONTACTS_prob+","+ str(d1) 
                                            i=i+1
					#print y_pred
  				#print "hello CONTACTS"
  if sum_m>sum_b:
     Final_class="m"
  else:
     Final_class="b"
  
  print '{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21}'.format(line,CALENDER_prob,CALENDER_pred,MICROPHONE_prob,MICROPHONE_pred,CAMERA_prob,CAMERA_pred,OTHERS_prob,OTHERS_pred,CONTACTS_prob,CONTACTS_pred,LOCATION_prob,LOCATION_pred,SMS_prob,SMS_pred,STORAGE_prob,STORAGE_pred,PHONE_prob,PHONE_pred,sum_b,sum_m,Final_class)
 






"""
CALENDER 145
MICROPHONE 392
CAMERA 753
OTHERS 1252
CONTACTS 1787
LOCATION 3214
SMS 3689
STORAGE 6068
PHONE 6794

with open('/home/nitesh/Downloads/Archive/TEST_DATA/CALENDER/CALENDER_test_60.csv') as f:
  reader=csv.reader(f)
  row =reader.next()
  for r in reader:
   print r
""" 
